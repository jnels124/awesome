-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")

--require('orglendar')

vicious = require("vicious")

-- Revelation library from awesome
require("revelation")

-- Obvious volume widget in /usr/share/awesome/lib/
require("obvious.volume_alsa")

-- Obvious battery widget in /usr/share/awesome/lib/
--require("obvious.battery")

apps2 = require( "applicationsmenu")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.add_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
--beautiful.init("/usr/share/awesome/themes/defau--lt/theme.lua")
beautiful.init(awful.util.getdir("config") .. "/themes/arch/theme.lua")
-- This is used later as the default terminal and editor to run.
terminal = "gnome-terminal"
editor = os.getenv("EDITOR") or "/opt/sublime-text/"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag({ "|Term|", "|Admin|", "|Web|", "|Edit|", "|File|", "|Docs|", "|System|", "|Misc|" }, s, layouts[1] )
end

-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awesome.conffile },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

fileManagersMenu = {
   { "FileManager", "pcmanfm" },
   { "Nautilus", "nautilus" },
   { "SU FileManager", "gksu pcmanfm" },
   { "SU Nautilus", "gksu nautilus" }
}

internetMenu = {
   { "Chromium", "chromium" }, --, "/home/jesse/Icons/Applications/chromium.png" },
   { "Firefox", "firefox-aurora" }, --, "/home/jesse/Icons/Applications/black_firefox.png"},
   { "Links",  "links" }, --, "/home/jesse/Icons/Applications/Links.png"},
   { "Luakit", "luakit" }, --, "/home/jesse/Icons/Applications/luakit.png"},
   { "Lynx", "lynx" } --, "/home/jesse/Icons/Applications/lynx.jpg" }
}

IDEMenu = {
    { "Arduino", "arduino" }, --, "/home/jesse/Icons/Applications/arduino.png" },
    { "Blue Jay", "bluej" }, --, "/home/jesse/Icons/Applications/bluej.png" },
    { "Eclipse", "eclipse" }, --, "/home/jesse/Icons/Applications/eclipse.jpg" },
    { "Processing", "processing" } --, "/home/jesse/Icons/Applications/processing.jpe" }
}

textEditorsMenu = {
   { "Emacs", "gksu emacs" }, -- "/home/jesse/Icons/Applications/emacs.png" },
   { "Gedit", "gksu gedit" }, -- "/home/jesse/Icons/Applications/gedit.png" },
   { "Gvim", "gksu gvim" }, -- "/home/jesse/Icons/Applications/vim.png" },
   { "Kate", "gksu kate" }, --"/home/jesse/Icons/Applications/kate.png" },
   { "Sublime", "gksu /opt/sublime-text/sublime_text" } -- "/home/jesse/Icons/Applications/sublime.jpg" }
   --{ "Vim", "vim" }
}

gamesMenu = {
   { "Mario", "megamario" },
   { "Doom", "zdoom" },
}

accessoriesMenu = {
  { "Calculator", "gnome-calculator"},
  { "Contacts", "gnome-contacts" },
  { "Dictionary", "gnome-dictionary" },
  { "Fonts", "gnome-font-viewer" },
  { "Key binder", "xbindkeys -k" },
  { "SkyDrive", "gnome-documents"},
  { "Search", "gnome-search-tool" },
  { "UML", "umbrello" }
}


applicationsMenu = {
   { "AdobeReader", "acroread" }, -- "/home/jesse/Icons/Applications/adobe.png" },
   { "Audacity", "audacity" }, -- "/home/jesse/Icons/Applications/audacity.png" },
   { "Cantor", "cantor" }, --"/home/jesse/Icons/Applications/cantor.jpg" },
   { "Editors", textEditorsMenu }, -- "/home/jesse/Icons/Applications/editors.png" },
   { "Email", "thunderbird" }, -- "/home/jesse/Icons/Applications/black_thunderbird.png" }, 
   { "Games", gamesMenu }, -- "/home/jesse/Icons/Applications/gamesFolder.png" },
   { "Gimp", "gimp" }, --"/home/jesse/Icons/Applications/gimp.png" },
   { "IDE'S", IDEMenu }, --"/home/jesse/Icons/Applications/IDEFolder.png" },
   { "Internet", internetMenu }, --"/home/jesse/Icons/Applications/internet.png" },                        
   { "Music", "vlc" }, --"/home/jesse/Icons/Applications/vlc.png" },
   { "Office", "libreoffice" }, --"/home/jesse/Icons/Applications/office.png" },
   { "Okular", "okular" }, --"/home/jesse/Icons/Applications/okular.png" },
   { "Ripperx", "ripperX" }, --"/home/jesse/Icons/Applications/ripperx.jpe" },
   { "Transmission", "transmission-gtk" }, -- "/home/jesse/Icons/Applications/transmission.png" },
   { "UnetBootin", "unetbootin" }, -- "/home/jesse/Icons/Applications/unetbootin.jpg" },
   { "Virutal Box", "virtualbox" } -- "/home/jesse/Icons/Applications/virtualbox.png" }
}

networkItemsMenu = {
   { "EtherApe", "gksu etherape" }, -- "/home/jesse/Icons/Applications/etherape.png" },
   { "Firewall", "gksu gufw" }, -- "/home/jesse/Icons/Applications/firewalld.jpg" },
   --{ "Gerix", "gksu gerix"},
   { "Haguichi", "haguichi"}, -- "/home/jesse/Icons/Applications/haguichi.png" },
   { "NetTool", "gnome-nettool"}, -- "/home/jesse/Icons/Applications/nettool.jpe" },
   { "Vidalia", "vidalia" }, -- "/home/jesse/Icons/Applications/vidalia.png"},
   { "Vinagre", "vinagre" }, --"/home/jesse/Icons/Applications/vinagre.png" },
   { "Wicd", "wicd-client" } --"/home/jesse/Icons/Applications/wicd.png" }
}

systemMenu = {
   { "Appearance", "lxappearance" },
   { "Backup Utility", "gksu qt4-fsarchiver" },
   { "Battery", "batti" },
   { "Conky", "gksu conky" },
   { "Disk Cleanup", "gksu baobab" },
   { "DiskUtility", "gnome-disks" },
   { "Files", fileManagersMenu },
   { "Gparted", "gksu gparted"},
   { "Key Monitor", "key-mon" },
   { "Package Management", "fslint"},
   --{ "Network", networkItemsMenu },
   { "Power", "gnome-power-statistics" },
   { "System Properties", "gnome-session-properties" },
   { "Search", "gnome-search-tool" },
   { "Settings", "gksu gnome-control-center" },
   { "Sound", "pavucontrol" }
}


mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "Accesories", accessoriesMenu },-- "/home/jesse/Icons/Applications/blackFinder.png" }
                                    { "Apps", applicationsMenu }, -- "/home/jesse/Icons/Applications/apps.png" },
                                    --{ "Apps2", applicationsmenu.applicationsmenu() },
                                    { "Network", networkItemsMenu }, --"/home/jesse/Icons/Applications/network_w.png" },
                                    { "System", systemMenu }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" })

-- Specify files to be parsed by orglendar
--orglendar.files = { "/home/jesse/Documents/schedule/school.org" }   -- Specify all files to be parsed, separated by commas

-- Create a systray
mysystray = widget({ type = "systray" })

-- Initialize CPU widget
cpuwidget = awful.widget.graph()
-- Graph properties
cpuwidget:set_width(75)
cpuwidget:set_background_color("#000000")
cpuwidget:set_color("#FF5656")
cpuwidget:set_gradient_colors({ "#FF5656", "#88A175", "#AECF96" })
-- Register widget
vicious.register(cpuwidget, vicious.widgets.cpu, "$1")
-- End of Cpu widget!

-- Initialize memory widget
memwidget = widget({ type = "textbox" })
-- Register widget
--vicious.register(memwidget, vicious.widgets.mem, "$1% ($2MB/$3MB)", 13)
vicious.register(memwidget, vicious.widgets.mem, "|$1% RAM|", 13)
-- End Memory widget 

-- Pacman Widget
pacwidget = widget({type = "textbox"})
pacwidget_t = awful.tooltip({ objects = { pacwidget},})
vicious.register(pacwidget, vicious.widgets.pkg,
                function(widget,args)
                    local io = { popen = io.popen }
                    local s = io.popen("pacman -Qu")
                    local str = ''

                    for line in s:lines() do
                        str = str .. line .. "\n"
                    end
                    pacwidget_t:set_text(str)
                    s:close()
                    return " |UPDATES: " .. args[1] .. "|"
                end, 1800, "Arch")
                --'1800' means check every 30 minutes
-- End pacman Widget

-- Disk usage widget
diskwidget = widget({ type = 'textbox' })
diskwidget.text = " |du|"
disk = require("diskusage")
-- the first argument is the widget to trigger the diskusage
-- the second/third is the percentage at which a line gets orange/red
-- true = show only local filesystems
disk.addToWidget(diskwidget, 75, 90, true)
-- End Disk usage widget

-- Network widget
netwidget = awful.widget.graph()
netwidget:set_width(75)
netwidget:set_height(50)
netwidget:set_background_color("#000000")
netwidget:set_color("#FF5656")
netwidget:set_gradient_colors({ "#FF5656", "#88A175", "#AECF96" })
netwidget_t = awful.tooltip({ objects = { netwidget.widget },})

-- Register network widget
vicious.register(netwidget, vicious.widgets.net,
                    function (widget, args)
                        netwidget_t:set_text("Network download: " .. args["{enp1s0f0 down_mb}"] .. "mb/s")
                        return args["{enp1s0f0 down_mb}"]
                    end)

-- End Network widget

-- Volume Widget
-- Configure obvious volume widget
--obvious.volume_alsa.setchannel("Master")
-- End of Volume Widget
-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "bottom", screen = s })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
            mytaglist[s],
            mypromptbox[s],
            cpuwidget,
            memwidget,
            pacwidet,
            diskwidget,
            layout = awful.widget.layout.horizontal.leftright
        },
        --mylayoutbox[s],
        mytextclock,
        s == 1 and mysystray or nil,
        --mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    awful.key({ modkey, "Control" }, "n", awful.client.restore),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    -- Set Firefox to always map on tags number 2 of screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { tag = tags[1][2] } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
